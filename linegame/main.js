!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function n(t){return t[0]}function s(t){const e=document.createElement("style");e.type="text/css",e.appendChild(document.createTextNode(t)),document.head.appendChild(e)}i.r(e),window.addEventListener("contextmenu",t=>t.preventDefault()),s(n`canvas{position:fixed;left:50%;top:0;height:100%;transform:translate(-50%, 0)}`),Array.prototype.last=function(){return this[this.length-1]};s(n`html{height:100%;width:100%;overflow:hidden;touch-action:none}body{height:100%;overflow:hidden;margin:0;width:100%;touch-action:none}.fullscreenfix{overflow:hidden;height:100%;width:100%;touch-action:none;background-color:#000}`),document.body.classList.add("ui");let o=document.createElement("div");o.classList.add("fullscreenfix"),o.setAttribute("touch-action","none");let h=document.createElement("button");h.appendChild(document.createTextNode("Enter Fullscreen")),h.addEventListener("click",()=>{!function(t){try{t.requestFullscreen()}catch(e){try{t.webkitRequestFullScreen()}catch(t){alert("Fullscreen not available.")}}}(o)}),o.appendChild(h);let l=document.createElement("button");l.appendChild(document.createTextNode("Refresh")),l.addEventListener("click",()=>{location.reload()}),o.appendChild(l);const r=new class{constructor(){this.canvas=document.createElement("canvas"),this.canvas.appendChild(document.createTextNode("This browser does not support canvas.")),this.canvas.width=800,this.canvas.height=600;let t=this.canvas.getContext("2d");if(!t)throw alert("Could not get rendering context."),new Error("Could not get rendering context");this.ctx=t,this.vx=0,this.vy=0,this.canJumpTimer=0,this.line=[{x:25,y:25}],this.renderLoop(),this.updateLoop(),this.keys={},document.onkeydown=t=>{this.keys[t.key]=!0},document.onkeyup=t=>{delete this.keys[t.key]}}async renderLoop(){for(;;)await new Promise(t=>setTimeout(t,1e3/70)),await new Promise(t=>window.requestAnimationFrame(t)),this.ctx.fillStyle="white",this.ctx.lineWidth=0,this.ctx.fillRect(0,0,800,600),this.ctx.fillStyle="yellow",this.ctx.shadowColor="yellow",this.ctx.shadowBlur=25,this.ctx.beginPath(),this.ctx.arc(this.line.last().x,this.line.last().y,25,25,2*Math.PI,!0),this.ctx.closePath(),this.ctx.fill(),this.ctx.shadowBlur=0,this.ctx.fillStyle="black",this.ctx.strokeStyle="black",this.ctx.lineWidth=5,this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(this.line[0].x-1,this.line[0].y-1),this.line.forEach(({x:t,y:e},i)=>{(i===this.line.length-60||this.line.length<60&&0===i)&&(this.ctx.stroke(),this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.strokeStyle="darkgrey"),this.ctx.lineTo(t,e)}),this.ctx.stroke(),this.ctx.fillStyle=this.canJumpTimer>0?"red":"lightblue",this.ctx.beginPath(),this.ctx.arc(this.line.last().x,this.line.last().y,5,5,2*Math.PI,!0),this.ctx.closePath(),this.ctx.fill()}updateLoop(){setInterval(()=>{let t=this.line.last().x,e=this.line.last().y;this.vx*=.9,this.vy+=.3,this.vy=Math.min(this.vy,10),this.canJumpTimer--,this.keys.ArrowRight&&(this.vx=Math.min(this.vx+.6,5)),this.keys.ArrowLeft&&(this.vx=Math.max(this.vx-.6,-5));let i=t+this.vx,n=e+this.vy,s=(s,o)=>{let h=function(t,e,i,n,s,o,h,l){if(t===i&&e===n||s===h&&o===l)return!1;let r=(l-o)*(i-t)-(h-s)*(n-e);if(0===r)return!1;let c=((h-s)*(e-o)-(l-o)*(t-s))/r,a=((i-t)*(e-o)-(n-e)*(t-s))/r;return!(c<0||c>1||a<0||a>1)&&{x:t+c*(i-t),y:e+c*(n-e)}}(t,e,i,n,o.x,o.y,s.x,s.y);if(h){let s=n-e,o=i-t;n=h.y-s/10,this.vy=-this.vy,this.vx=-this.vx,i=h.x-o/10,this.canJumpTimer=60}};this.line.forEach((t,e)=>{if(e>=this.line.length-60)return;let i=this.line[e-1];i&&s(i,t)}),s({x:0,y:600},{x:800,y:600}),s({x:800,y:0},{x:800,y:600}),s({x:0,y:0},{x:800,y:0}),s({x:0,y:0},{x:0,y:600}),this.keys.ArrowUp&&this.canJumpTimer>0&&(console.log("up"),this.vy=-7,this.canJumpTimer=0),-.0125<=this.vx&&this.vx<=.0125&&(this.vx=0),-.0125<=this.vy&&this.vy<=.0125&&(this.vy=0),(this.vx||this.vy)&&this.line.push({x:i,y:n}),this.line.length>120&&this.line.shift()},1e3/60)}};o.appendChild(r.canvas),document.body.appendChild(o)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,